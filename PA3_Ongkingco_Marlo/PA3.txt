1) Run the program with an amount of Threads as many as the number of CPUs of your
system (if you donâ€™t know you can use the nproc --all command in your terminal, or in
C use the System Call sysconf(_SC_NPROCESSORS_ONLN);.
Write your observations.

A: The number of CPUs in my system (as a result of nproc) is 8. Running the program with 8 threads
results in a roughly-equal max latency between all threads. Some threads occassionally spike in max latency
before going back to normal levels.



2) Run the program again with the same amount of Threads. Open a different terminal and
issue the command: watch -n.5 grep ctxt /proc/<pid>/status
This allows you to see the number of Context Switches (voluntary and involuntary) that a
Task with PID <pid>; has undergone so far, and get an update of it every 0.5 seconds. You
can find the PID of a specific task through pstree -p, or more easily by the running
sched.c which should now be printing out the PID of each thread alongside each progress
bar. Now (as you are observing the Context Switches of a specific Thread), switch its Scheduling
Policy to a Real-Time one. Try both Policies, and 1-2 different Priority Levels.
Write the sequence of commands you used for this question, and your observations.

Sequence of commands: ./sched 8 -> watch -n.5 grep ctxt /proc/9847/status

A: The watch command lists the number of voluntary and non-voluntary context switches of the thread.
It shows that the number of voluntary ctxt switches remains constant at 835, while the number of 
nonvoluntary ctxt switches increases steadily.


3) Run the program again with the same amount of Threads.
Create a system cpuset with all CPUs except 1 (as described in Method b) in the section
about Linux Multi-Processor Control) and move all Tasks (all User-Level and Kernel-Level ones
that are possible to move) into that set. Create a dedicated cpuset with only the CPU that
is excluded from the system one.
Move one of the Threads of sched.c to the dedicated cpuset.
Write the sequence of commands you used for this question, and your observations.


4) While 3) is still executing with one Thread on the dedicated cpuset, observe the Context
Switches of that Thread with:
watch -n.5 grep ctxt /proc/<pid>;/status
and then change its Scheduling Policy to a Real-Time one at 1-2 Priority Levels.
Write the sequence of commands you used for this question, and your observations.